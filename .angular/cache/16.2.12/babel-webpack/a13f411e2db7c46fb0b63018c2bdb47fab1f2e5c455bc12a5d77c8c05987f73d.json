{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { environment } from 'src/app/environments/environment';\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  get user() {\n    return this._user;\n  }\n  constructor() {\n    this._usernameAdmin = 'admin@gmail.com';\n    this._passwordAdmin = '123456';\n    this._http = inject(HttpClient);\n    this._router = inject(Router);\n  }\n  login(username = null, password = null) {\n    if (this._usernameAdmin !== username || this._passwordAdmin !== password) {\n      console.log('Pogresni pristupni podaci');\n      return;\n    }\n    console.log('USER: ', this.user);\n    console.log(this._usernameAdmin);\n    console.log(this._passwordAdmin);\n    // login logika\n    //TODO change any with coresponding type\n    this._http.get(`${environment.apiURL}/login-admin`).subscribe({\n      next: res => {\n        if (!res) return;\n        localStorage.setItem('currentUser', JSON.stringify(res));\n        this._user = {\n          ...res\n        };\n        setTimeout(() => {\n          this._router.navigate(['features']);\n        }, 400);\n        console.log('login response', res);\n      },\n      error: err => console.log(err)\n    });\n    //TODO extend login with basic user\n  }\n\n  logout() {\n    localStorage.removeItem('currentUser');\n    this._router.navigate(['/login']);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpClient","inject","Router","environment","AuthService","user","_user","constructor","_usernameAdmin","_passwordAdmin","_http","_router","login","username","password","console","log","get","apiURL","subscribe","next","res","localStorage","setItem","JSON","stringify","setTimeout","navigate","error","err","logout","removeItem","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\amrah\\OneDrive\\Desktop\\Angular projects\\company-management\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable, inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { environment } from 'src/app/environments/environment';\nimport { User } from '../utilities/types/core-types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private readonly _usernameAdmin = 'admin@gmail.com';\n  private readonly _passwordAdmin = '123456';\n\nprivate _http = inject(HttpClient);\nprivate _router = inject(Router);\n\n//TODO zamijeniti tip any sa User\nprivate _user!:User;\npublic get user() {\n  return this._user;\n}\n  constructor() { }\n\n  public login(\n    username:string | null = null, \n    password:string | null = null){\n      if(this._usernameAdmin !== username || this._passwordAdmin !== password){\n         console.log('Pogresni pristupni podaci');\n         return;\n      }\n\n       console.log('USER: ',this.user);\n       console.log(this._usernameAdmin);\n       console.log(this._passwordAdmin);\n      // login logika\n      //TODO change any with coresponding type\n    this._http.get<any>(`${environment.apiURL}/login-admin`).subscribe(\n    { \n      \n        next:(res)=>\n        {\n          \n          if(!res)\n          return;\n          localStorage.setItem('currentUser', JSON.stringify(res));\n          this._user = {...res};\n          setTimeout(() => {\n            this._router.navigate(['features']);\n          },400);\n          console.log('login response', res)},\n        error:(err)=>console.log(err),\n    }\n    )\n\n\n      //TODO extend login with basic user\n  }\n\n  public logout(){\n    localStorage.removeItem('currentUser');\n    this._router.navigate(['/login']);\n  }\n}"],"mappings":"AAAA,SAASA,UAAU,QAAQ,sBAAsB;AACjD,SAAqBC,MAAM,QAAQ,eAAe;AAClD,SAASC,MAAM,QAAQ,iBAAiB;AACxC,SAASC,WAAW,QAAQ,kCAAkC;;AAM9D,OAAM,MAAOC,WAAW;EASxB,IAAWC,IAAIA,CAAA;IACb,OAAO,IAAI,CAACC,KAAK;EACnB;EACEC,YAAA;IAXiB,KAAAC,cAAc,GAAG,iBAAiB;IAClC,KAAAC,cAAc,GAAG,QAAQ;IAEpC,KAAAC,KAAK,GAAGT,MAAM,CAACD,UAAU,CAAC;IAC1B,KAAAW,OAAO,GAAGV,MAAM,CAACC,MAAM,CAAC;EAOd;EAETU,KAAKA,CACVC,QAAA,GAAyB,IAAI,EAC7BC,QAAA,GAAyB,IAAI;IAC3B,IAAG,IAAI,CAACN,cAAc,KAAKK,QAAQ,IAAI,IAAI,CAACJ,cAAc,KAAKK,QAAQ,EAAC;MACrEC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;MACxC;;IAGFD,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAC,IAAI,CAACX,IAAI,CAAC;IAC/BU,OAAO,CAACC,GAAG,CAAC,IAAI,CAACR,cAAc,CAAC;IAChCO,OAAO,CAACC,GAAG,CAAC,IAAI,CAACP,cAAc,CAAC;IACjC;IACA;IACF,IAAI,CAACC,KAAK,CAACO,GAAG,CAAM,GAAGd,WAAW,CAACe,MAAM,cAAc,CAAC,CAACC,SAAS,CAClE;MAEIC,IAAI,EAAEC,GAAG,IAAG;QAGV,IAAG,CAACA,GAAG,EACP;QACAC,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAACJ,GAAG,CAAC,CAAC;QACxD,IAAI,CAACf,KAAK,GAAG;UAAC,GAAGe;QAAG,CAAC;QACrBK,UAAU,CAAC,MAAK;UACd,IAAI,CAACf,OAAO,CAACgB,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;QACrC,CAAC,EAAC,GAAG,CAAC;QACNZ,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEK,GAAG,CAAC;MAAA,CAAC;MACrCO,KAAK,EAAEC,GAAG,IAAGd,OAAO,CAACC,GAAG,CAACa,GAAG;KAC/B,CACA;IAGC;EACJ;;EAEOC,MAAMA,CAAA;IACXR,YAAY,CAACS,UAAU,CAAC,aAAa,CAAC;IACtC,IAAI,CAACpB,OAAO,CAACgB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EACnC;EAAC,QAAAK,CAAA,G;qBApDU5B,WAAW;EAAA;EAAA,QAAA6B,EAAA,G;WAAX7B,WAAW;IAAA8B,OAAA,EAAX9B,WAAW,CAAA+B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}